<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visual Computing on Visual Computing 2023-1</title><link>https://visualcomputing.github.io/showcase/</link><description>Recent content in Visual Computing on Visual Computing 2023-1</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://visualcomputing.github.io/showcase/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://visualcomputing.github.io/showcase/docs/Visual-Illusions/Masking/Visual-masking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Visual-Illusions/Masking/Visual-masking/</guid><description>Ejercicio 3: Cinegramas y el patrón de Moaré # 1. Introducción
Un patrón de muaré, a veces conocido como patrón de moaré, es un patrón de interferencia que aparece en matemáticas, física, óptica y artes gráficas cuando se superponen dos líneas, ya sean rectas o curvas.
Este patrón puede ser utilizado para cubrir parcialmente una imagen cuya disposición es la justa para que en cada fragmento de imagen mostrada se formen varias imagenes diferentes.</description></item><item><title>Coloring</title><link>https://visualcomputing.github.io/showcase/docs/Shaders/coloring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Shaders/coloring/</guid><description>Exercise # Figure it out the js code of the above sketches. Implement other blending modes. Introduction # El &amp;ldquo;color blending&amp;rdquo; o &amp;ldquo;mezcla de colores&amp;rdquo; se refiere al proceso de combinar varios colores para crear un efecto de transición suave entre ellos. Es comúnmente utilizado en el campo del diseño gráfico, la pintura, la ilustración y la fotografía digital.
Background # El uso del color blending tiene antecedentes históricos y técnicos en diversas formas de arte visual.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/members/Adrian/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/members/Adrian/</guid><description>#Adrian Felipe Castillo Gonzales
Info # Estudiante de octavo semestre, interesado en inteligencia artificial.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/members/Jaime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/members/Jaime/</guid><description>#Jaime Andres Macias Sanchez
Info # Intereses: Teoría de números, teoría de lenguajes formales, teoría de autómatas y matemáticas.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/members/Rodrigo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/members/Rodrigo/</guid><description>#Rodrigo Sierra Agredo
Info # Estudiante de Ingeniería de Sistemas en la Universidad Nacional de Colombia, motivado por aprender sobre las aplicaciones de la carrera en el área del arte y el diseño gráfico. Mis intereses y recorrido hasta el momento en la carrera van más por el lado de la infraestructura y seguridad de la información, pero aún así me gustaría explorar más estas aplicaciones artísticas, como ya mencioné anteriormente.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/Visual-Illusions/Coloring/Color-blindness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Visual-Illusions/Coloring/Color-blindness/</guid><description>Color blindness
Ejercicio 1: Ayuda a daltonicos # 1. Introducción
El daltonismo se define como la incapacidad de ver algunos colores en la forma normal. Ocurre cuando existe un problema con ciertas celulas nerviosas del ojo que perciben el color. Si solo falta un pigmento, la persona suele tener inconvenientes al momento de diferenciar entre el rojo y el verde, el cual es el tipo más común de daltonismo. En la mayoría de los casos, esta condición se debe a un problema genético.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/Visual-Illusions/Mach-Bands/Terrain-with-Perlin-noise/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Visual-Illusions/Mach-Bands/Terrain-with-Perlin-noise/</guid><description>Ejercicio 2: Generación infinita en videojuegos # 1. Introducción
El Ruido Perlin es una función matemática que utiliza la interpolación entre un gran número de gradientes de vectores precalculados para crear un valor que varía de forma pseudoaleatoria en el espacio o en el tiempo. Se asemeja al ruido blanco y se utiliza con frecuencia en imágenes generadas por ordenador para simular la variabilidad de muchos tipos de fenómenos, dándoles un aspecto más realista.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/Visual-Illusions/Spatial-Coherence/Pixelator-demo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Visual-Illusions/Spatial-Coherence/Pixelator-demo/</guid><description>Ejercicio 5: Pixelador # 1. Introducción
Aunque a primera vista parece qeu pixelar una imagen sea un desproposito, lo cierto es que tiene aplicaciones muy utiles. Un ejemplo de esto es la censura por pixelado que busca ocultar información; Otro uso bastante popular es el de reducir el tamaño de las imagenes a cambio de perder algo de calidad para poder enviar archivos no tan pesados.
2. Solución
A continuación se pixela el mismo video utilizando dos tecnicas diferentes: Color averaging y Spatial coherence:</description></item><item><title>Post Effects</title><link>https://visualcomputing.github.io/showcase/docs/Shaders/posteffects/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Shaders/posteffects/</guid><description>Exercise # Implement other coloring brightness tools such as HSV value V, HSL lightness L or Component average. Implement texture tinting by mixing color and texel interpolated data. 1. Introducción y contexto
El mapeo de texturas en transportar una textura (una imágen) a una superficie dibujada. Usualmente, para cubrir de la manera más eficiente distintas formas geométricas, se utiliza el mapeo a triángulos, por lo que se implementa la interpolación con coordenadas baricéntricas para lograr tal efecto.</description></item><item><title>Texturing</title><link>https://visualcomputing.github.io/showcase/docs/Shaders/Texturing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Shaders/Texturing/</guid><description>Exercise # Implement other coloring brightness tools such as HSV value V, HSL lightness L or Component average. Implement texture tinting by mixing color and texel interpolated data. 1. Introducción y contexto
El mapeo de texturas en transportar una textura (una imágen) a una superficie dibujada. Usualmente, para cubrir de la manera más eficiente distintas formas geométricas, se utiliza el mapeo a triángulos, por lo que se implementa la interpolación con coordenadas baricéntricas para lograr tal efecto.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/Visual-Illusions/Masking/Convolution-masks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Visual-Illusions/Masking/Convolution-masks/</guid><description>Ejercicio 4: Kernel de imagenes # 1. Introducción
Un kernel, matriz de convolución o máscara es una matriz diminuta utilizada en el procesamiento de imágenes para la detección de bordes, el relieve, la nitidez y otras funciones. Para ello se utiliza la convolución entre el núcleo y una imagen. Dicho de otro modo, el núcleo o kernel es la función que determina cómo cada píxel de la imagen de salida se ve afectado por los píxeles vecinos (incluido él mismo) de la imagen de entrada.</description></item><item><title>Image Processing</title><link>https://visualcomputing.github.io/showcase/docs/Shaders/ImageProcessing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Shaders/ImageProcessing/</guid><description>Exercise # Implement an image / video processing app supporting different masks, including other kernel sizes different than 3x3, and:
A region-of-interest base tool to selectively apply a given mask.Hint: circular regions around the mouse pointer are handy and quite simple to implement by means of glsl distance. A magnifier tool. Requires a bit of research. For instance, look for it in shadertoy. Integrate luma and other coloring brightness tools.</description></item><item><title>Procedural Texturing</title><link>https://visualcomputing.github.io/showcase/docs/Shaders/ProceduralTexturing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Shaders/ProceduralTexturing/</guid><description>Exercise # Adapt other patterns from the book of shaders (refer also to the shadertoy collection) and map them as textures onto other 3D shapes.
Procedural Texturing # 1. Introducción
La texturización procedural es una técnica revolucionaria en la creación de contenido digital que utiliza algoritmos y reglas matemáticas para generar texturas y patrones complejos en tiempo real. A diferencia de los métodos tradicionales, esta técnica automatizada permite crear texturas detalladas, realistas y personalizables de manera eficiente y escalable.</description></item><item><title>Spatial Coherence</title><link>https://visualcomputing.github.io/showcase/docs/Shaders/SpatialCoherence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Shaders/SpatialCoherence/</guid><description>Exercise # Implement your own source dataset and a mechanism to select different images from it. Implement a pixelator in software that doesn’t use spatial coherence and compare the results with those obtained here. Introduction # La coherencia espacial se refiere a la propiedad de que los píxeles o elementos de una imagen o gráfico cercanos entre sí tienden a tener características o valores similares. Esto significa que existe una correlación o similitud en los datos espacialmente adyacentes.</description></item><item><title>Photomosaic</title><link>https://visualcomputing.github.io/showcase/docs/Shaders/Photomosaic/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Shaders/Photomosaic/</guid><description>Exercise # Implement a mosaic (or/and ascii art) visual application.
Introduction # El fotomosaico es una técnica que consiste en crear una imagen grande compuesta por una colección de imágenes más pequeñas (los azulejos o &amp;ldquo;tiles&amp;rdquo;) que, en conjunto, forman una representación visual del objeto o escena original. Cada imagen pequeña se selecciona y coloca de manera que su contenido contribuya a la apariencia general del objeto o escena que se está representando.</description></item></channel></rss>