<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Visual Computing on Showcase Template</title><link>https://visualcomputing.github.io/showcase/</link><description>Recent content in Visual Computing on Showcase Template</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://visualcomputing.github.io/showcase/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://visualcomputing.github.io/showcase/docs/Visual-Illusions/Masking/Visual-masking/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Visual-Illusions/Masking/Visual-masking/</guid><description>Ejercicio 3: Cinegramas y el patrón de Moaré # 1. Introducción
Un patrón de muaré, a veces conocido como patrón de moaré, es un patrón de interferencia que aparece en matemáticas, física, óptica y artes gráficas cuando se superponen dos líneas, ya sean rectas o curvas.
Este patrón puede ser utilizado para cubrir parcialmente una imagen cuya disposición es la justa para que en cada fragmento de imagen mostrada se formen varias imagenes diferentes.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/members/Adrian/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/members/Adrian/</guid><description>#Adrian Felipe Castillo Gonzales
Info # Estudiante de octavo semestre, interesado en inteligencia artificial.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/members/Jaime/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/members/Jaime/</guid><description>#Jaime Andres Macias Sanchez
Info # Estudiante de ingenieria de sistemas en la universidad nacional.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/members/Rodrigo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/members/Rodrigo/</guid><description>#Rodrigo Sierra Agredo
Info # Estudiante de ingenieria de sistemas en la universidad nacional.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/Visual-Illusions/Coloring/Color-blindness/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Visual-Illusions/Coloring/Color-blindness/</guid><description>Color blindness
Ejercicio 1: Ayuda a daltonicos # 1. Introducción
El daltonismo se define como la incapacidad de ver algunos colores en la forma normal. Ocurre cuando existe un problema con ciertas celulas nerviosas del ojo que perciben el color. Si solo falta un pigmento, la persona suele tener inconvenientes al momento de diferenciar entre el rojo y el verde, el cual es el tipo más común de daltonismo. En la mayoría de los casos, esta condición se debe a un problema genético.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/Visual-Illusions/Mach-Bands/Terrain-with-Perlin-noise/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Visual-Illusions/Mach-Bands/Terrain-with-Perlin-noise/</guid><description>Ejercicio 2: Generación infinita en videojuegos # 1. Introducción
El Ruido Perlin es una función matemática que utiliza la interpolación entre un gran número de gradientes de vectores precalculados para crear un valor que varía de forma pseudoaleatoria en el espacio o en el tiempo. Se asemeja al ruido blanco y se utiliza con frecuencia en imágenes generadas por ordenador para simular la variabilidad de muchos tipos de fenómenos, dándoles un aspecto más realista.</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/Visual-Illusions/Spatial-Coherence/Pixelator-demo/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Visual-Illusions/Spatial-Coherence/Pixelator-demo/</guid><description>Ejercicio 5: Pixelador # 1. Introducción
Aunque a primera vista parece qeu pixelar una imagen sea un desproposito, lo cierto es que tiene aplicaciones muy utiles. Un ejemplo de esto es la censura por pixelado que busca ocultar información; Otro uso bastante popular es el de reducir el tamaño de las imagenes a cambio de perder algo de calidad para poder enviar archivos no tan pesados.
2. Solución
A continuación se pixela el mismo video utilizando dos tecnicas diferentes: Color averaging y Spatial coherence:</description></item><item><title/><link>https://visualcomputing.github.io/showcase/docs/Visual-Illusions/Masking/Convolution-masks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://visualcomputing.github.io/showcase/docs/Visual-Illusions/Masking/Convolution-masks/</guid><description>Ejercicio 4: Kernel de imagenes # 1. Introducción
Un kernel, matriz de convolución o máscara es una matriz diminuta utilizada en el procesamiento de imágenes para la detección de bordes, el relieve, la nitidez y otras funciones. Para ello se utiliza la convolución entre el núcleo y una imagen. Dicho de otro modo, el núcleo o kernel es la función que determina cómo cada píxel de la imagen de salida se ve afectado por los píxeles vecinos (incluido él mismo) de la imagen de entrada.</description></item></channel></rss>